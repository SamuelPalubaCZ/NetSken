//
//  VulnerabilityModel.swift
//  NetSken
//
//  Created by Samuel Paluba on 24.07.2025.
//

import Foundation
import Cocoa

// MARK: - Vulnerability Severity
enum VulnerabilitySeverity: String, CaseIterable, Codable {
    case info = "info"
    case low = "low"
    case medium = "medium"
    case high = "high"
    case critical = "critical"
    
    var displayName: String {
        switch self {
        case .info: return "Info"
        case .low: return "Low"
        case .medium: return "Medium"
        case .high: return "High"
        case .critical: return "Critical"
        }
    }
    
    var color: NSColor {
        switch self {
        case .info: return NSColor.systemBlue
        case .low: return NSColor.systemGreen
        case .medium: return NSColor.systemYellow
        case .high: return NSColor.systemOrange
        case .critical: return NSColor.systemRed
        }
    }
    
    var priority: Int {
        switch self {
        case .info: return 0
        case .low: return 1
        case .medium: return 2
        case .high: return 3
        case .critical: return 4
        }
    }
}

// MARK: - VulnerabilityModel
class VulnerabilityModel: NSObject, Codable {
    let identifier: String
    let cveId: String?
    let title: String
    let details: String
    let severity: VulnerabilitySeverity
    let cvssScore: Double?
    let sourceTool: String
    let detectedAt: Date
    let affectedPort: Int?
    let affectedService: String?
    let solution: String?
    let references: [String]
    
    init(identifier: String,
         cveId: String? = nil,
         title: String,
         details: String,
         severity: VulnerabilitySeverity,
         cvssScore: Double? = nil,
         sourceTool: String,
         detectedAt: Date = Date(),
         affectedPort: Int? = nil,
         affectedService: String? = nil,
         solution: String? = nil,
         references: [String] = []) {
        
        self.identifier = identifier
        self.cveId = cveId
        self.title = title
        self.details = details
        self.severity = severity
        self.cvssScore = cvssScore
        self.sourceTool = sourceTool
        self.detectedAt = detectedAt
        self.affectedPort = affectedPort
        self.affectedService = affectedService
        self.solution = solution
        self.references = references
        
        super.init()
    }
    
    // MARK: - Computed Properties
    var severityText: String {
        if let cvss = cvssScore {
            return "\(severity.displayName) (CVSS: \(String(format: "%.1f", cvss)))"
        } else {
            return severity.displayName
        }
    }
    
    var shortDescription: String {
        if details.count > 100 {
            return String(details.prefix(97)) + "..."
        }
        return details
    }
    
    var hasFixAvailable: Bool {
        return solution != nil && !solution!.isEmpty
    }
}

// MARK: - PortModel
class PortModel: NSObject, Codable {
    let portNumber: Int
    let portProtocol: String
    let service: String?
    let version: String?
    let state: PortState
    let banner: String?
    let detectedAt: Date
    
    init(portNumber: Int,
         portProtocol: String,
         service: String? = nil,
         version: String? = nil,
         state: PortState = .open,
         banner: String? = nil,
         detectedAt: Date = Date()) {
        
        self.portNumber = portNumber
        self.portProtocol = portProtocol
        self.service = service
        self.version = version
        self.state = state
        self.banner = banner
        self.detectedAt = detectedAt
        
        super.init()
    }
    
    // MARK: - Computed Properties
    var displayText: String {
        var text = "\(portNumber)/\(portProtocol.uppercased())"
        if let service = service {
            text += " (\(service)"
            if let version = version {
                text += " \(version)"
            }
            text += ")"
        }
        return text
    }
    
    var isSecure: Bool {
        guard let service = service else { return true }
        
        // Check for common insecure services
        let insecureServices = ["ftp", "telnet", "http", "smtp", "pop3", "imap"]
        return !insecureServices.contains(service.lowercased())
    }
}

// MARK: - Port State
enum PortState: String, CaseIterable, Codable {
    case open = "open"
    case closed = "closed"
    case filtered = "filtered"
    case openFiltered = "open|filtered"
    case closedFiltered = "closed|filtered"
    
    var displayName: String {
        switch self {
        case .open: return "Open"
        case .closed: return "Closed"
        case .filtered: return "Filtered"
        case .openFiltered: return "Open|Filtered"
        case .closedFiltered: return "Closed|Filtered"
        }
    }
    
    var color: NSColor {
        switch self {
        case .open: return NSColor.systemRed
        case .closed: return NSColor.systemGray
        case .filtered: return NSColor.systemYellow
        case .openFiltered: return NSColor.systemOrange
        case .closedFiltered: return NSColor.systemGray
        }
    }
}